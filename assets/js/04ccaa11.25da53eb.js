(self.webpackChunkcloud_docs=self.webpackChunkcloud_docs||[]).push([[528],{8141:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return a},toc:function(){return l},default:function(){return d}});var o=t(2122),i=t(9756),r=(t(7294),t(3905)),s=["components"],c={sidebar_position:1},a={unversionedId:"cloud-functions/firestoreScheduler",id:"cloud-functions/firestoreScheduler",isDocsHomePage:!1,title:"Firestore Scheduler",description:"function overview",source:"@site/docs/cloud-functions/firestoreScheduler.md",sourceDirName:"cloud-functions",slug:"/cloud-functions/firestoreScheduler",permalink:"/cloud-docs/docs/cloud-functions/firestoreScheduler",editUrl:"https://github.com/sirius-400/cloud-docs/edit/main/website/docs/cloud-functions/firestoreScheduler.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/cloud-docs/docs/overview"},next:{title:"Models",permalink:"/cloud-docs/docs/cloud-functions/models"}},l=[{value:"Index File",id:"index-file",children:[]},{value:"Package file",id:"package-file",children:[]},{value:"ESLint Config",id:"eslint-config",children:[]},{value:"Create .gcloudignore file",id:"create-gcloudignore-file",children:[]},{value:"Create .gitignore file",id:"create-gitignore-file",children:[]},{value:"Deploy your functions",id:"deploy-your-functions",children:[{value:"Create a New PubSub Topic",id:"create-a-new-pubsub-topic",children:[]},{value:"Create Subscription to PubSub Topic",id:"create-subscription-to-pubsub-topic",children:[]},{value:"Deploy Functions",id:"deploy-functions",children:[]},{value:"Create New Cloud Scheduler Job",id:"create-new-cloud-scheduler-job",children:[]}]}],u={toc:l};function d(e){var n=e.components,c=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},u,c,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"function overview",src:t(164).Z})),(0,r.kt)("p",null,"This functions is the one that we use for automating backup and get raw data from Firestore to be processed by ML in AI Platform."),(0,r.kt)("h2",{id:"index-file"},"Index File"),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js")," and write these code,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},'const Firestore = require("@google-cloud/firestore");\nconst {Storage} = require("@google-cloud/storage");\nconst BUCKET_NAME = "your-bucket-name";     // Your Bucket Name\nconst PROJECTID = "your-bucket-name";       // Your Project ID\nconst COLLECTION_NAME = "collection-name";  // Your Collection Name\nconst firestore = new Firestore({\n  projectId: PROJECTID,\n  timestampsInSnapshots: true,\n});\nconst storage = new Storage();\nconst converter = require("json-2-csv");\nconst fs = require("fs");\n\nexports.firestoreBackupFunctions = async (context) => {\n  const unixTimestamp = Date.now();\n  const jsonPath = "/tmp/input.json";\n  const csvPath = "/tmp/input.csv";\n\n  const snapshot = await\n  firestore\n      .collection(COLLECTION_NAME).get();\n\n  const testDatas = [];\n  snapshot.forEach((doc) => {\n    const id = doc.id;\n    const data = doc.data();\n    testDatas.push({id, ...data});\n  });\n\n  fs.writeFileSync(jsonPath, JSON.stringify(testDatas));\n  const inputFile = JSON.parse(fs.readFileSync(jsonPath));\n  (async () => {\n    try {\n      const csv = await converter.json2csvAsync(inputFile);\n      fs.writeFileSync(csvPath, csv);\n      await uploadLocalFileToStorage(\n          csvPath, "input-"+unixTimestamp+".csv");\n      await uploadLocalFileToStorage(jsonPath, "backup.json");\n    } catch (err) {\n      console.error(err);\n    }\n  })();\n};\n\n/**\n * uploadCsvFile.\n * @param {string} filePath file path in local.\n * @param {string} fileName file name in cloud storage.\n * @param {string} dir cloud storage target directory \n */\nasync function uploadLocalFileToStorage(filePath, fileName, dir="data/") {\n  const directory = dir;\n\n  const bucket = storage.bucket(BUCKET_NAME);\n  const destination = `${directory}${fileName}`;\n\n  try {\n    // Uploads a local file to the bucket\n    await bucket.upload(filePath, {\n      destination: destination,\n      gzip: true,\n      metadata: {\n        cacheControl: "public, max-age=3600",\n      },\n    });\n\n    console.log(`${fileName} uploaded to /${directory}${fileName}.`);\n  } catch (e) {\n    throw new Error("uploadLocalFileToStorage failed: " + e);\n  }\n}\n')),(0,r.kt)("h2",{id:"package-file"},"Package file"),(0,r.kt)("p",null,"This is my ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file used to build this functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=package.json",title:"package.json"},'{\n  "name": "functions",\n  "version": "1.0.0",\n  "description": "",\n  "scripts": {\n    "lint": "eslint ."\n  },\n  "main": "index.js",\n  "dependencies": {\n    "@google-cloud/firestore": "4.12.2",\n    "@google-cloud/functions-framework": "^1.8.0",\n    "@google-cloud/storage": "^5.8.5",\n    "json-2-csv": "^3.14.0",\n    "semver": "^5.5.1"\n  },\n  "devDependencies": {\n    "babel-eslint": "^10.1.0",\n    "eslint": "^7.6.0",\n    "eslint-config-google": "^0.14.0"\n  }\n}\n')),(0,r.kt)("h2",{id:"eslint-config"},"ESLint Config"),(0,r.kt)("p",null,"Enable ESLint to lint your javascript code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=.eslintrc.js",title:".eslintrc.js"},'module.exports = {\n  "root": true,\n  "env": {\n    es6: true,\n    node: true,\n  },\n  "extends": [\n    "eslint:recommended",\n    "google",\n  ],\n  "rules": {\n    quotes: ["error", "double"],\n  },\n  "parser": "babel-eslint",\n};\n')),(0,r.kt)("h2",{id:"create-gcloudignore-file"},"Create .gcloudignore file"),(0,r.kt)("p",null,"Create this file to ignore what file to be uploaded."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:"title=.gcloudignore",title:".gcloudignore"},'# This file specifies files that are *not* uploaded to Google Cloud Platform\n# using gcloud. It follows the same syntax as .gitignore, with the addition of\n# "#!include" directives (which insert the entries of the given .gitignore-style\n# file at that point).\n#\n# For more information, run:\n#   $ gcloud topic gcloudignore\n#\n.gcloudignore\n# If you would like to upload your .git directory, .gitignore file or files\n# from your .gitignore file, remove the corresponding line\n# below:\n.git\n.gitignore\napackage.json\nindex_bak.js\nnode_modules/\n\n#!include:.gitignore\n')),(0,r.kt)("h2",{id:"create-gitignore-file"},"Create .gitignore file"),(0,r.kt)("p",null,"Create this file to ignore what file to be uploaded."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:"title=.gitignore",title:".gitignore"},"node_modules/\n*.log\n")),(0,r.kt)("h2",{id:"deploy-your-functions"},"Deploy your functions"),(0,r.kt)("p",null,"You can deploy this functons on the cloud (gcp) using ",(0,r.kt)("inlineCode",{parentName:"p"},"gcloud")," command."),(0,r.kt)("h3",{id:"create-a-new-pubsub-topic"},"Create a New PubSub Topic"),(0,r.kt)("p",null,"Go to the gcp console or using the ",(0,r.kt)("inlineCode",{parentName:"p"},"admin SDK"),", create new PubSub topic named ",(0,r.kt)("inlineCode",{parentName:"p"},"firestoreScheduler")," or whatever name you want."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud pubsub topics create firestoreScheduler\n")),(0,r.kt)("h3",{id:"create-subscription-to-pubsub-topic"},"Create Subscription to PubSub Topic"),(0,r.kt)("p",null,"Create a new subscription to the topic we created earlier."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud pubsub subscripsions create scheduler-sub --topic firestoreScheduler\n")),(0,r.kt)("h3",{id:"deploy-functions"},"Deploy Functions"),(0,r.kt)("p",null,"Deploy the functions with ",(0,r.kt)("inlineCode",{parentName:"p"},"gcloud functions deploy")," command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud functions deploy firestoreBackupFunctions --trigger-topic=firestoreScheduler --runtime=nodejs14 --region=asia-southeast2\n")),(0,r.kt)("h3",{id:"create-new-cloud-scheduler-job"},"Create New Cloud Scheduler Job"),(0,r.kt)("p",null,"After the deploying the functions, don't forget to create new Cloud Scheduler job."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"create new cloud scheduler",src:t(8346).Z})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"first cloud scheduler config",src:t(7850).Z})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"second cloud scheduler config",src:t(9159).Z})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"third cloud scheduler config",src:t(7120).Z})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Thats it! Your functions are good to go for now.")))}d.isMDXComponent=!0},8346:function(e,n,t){"use strict";n.Z=t.p+"assets/images/400-capstone-scheduler-001-9ce9ccb8d977b70a7d3a76ff19e697d3.png"},7850:function(e,n,t){"use strict";n.Z=t.p+"assets/images/400-capstone-scheduler-002-bc43c7e2c66c303a44bc1fa78eaeabcd.png"},9159:function(e,n,t){"use strict";n.Z=t.p+"assets/images/400-capstone-scheduler-003-5eb61e649375c60f6690157afaf8ff58.png"},7120:function(e,n,t){"use strict";n.Z=t.p+"assets/images/400-capstone-scheduler-004-e5f97063b2fb21e8a338145d1ebbafdd.png"},164:function(e,n,t){"use strict";n.Z=t.p+"assets/images/overview-6e5e5966d94a585b5d028bf7667c1495.png"}}]);